<!-- 
 ******************************************************************************
 * Copyright (c) 2015 Oracle
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Konstantin Komissarchik - initial implementation and ongoing maintenance
 ******************************************************************************
-->

<!--

This is a library to perform JAR signing on Eclipse.org infrastructure using
Eclipse Foundation's certificate. 

Ant-Contrib package (http://ant-contrib.sourceforge.net) is required. 

The following instructions are for Ant-based builds:

1. Copy sign-local.xml to your project's source control system. This file 
   provides a fail-over signing macro when your build is invoked locally by
   the user on their system. Calling the Sign macro in this situation will 
   fail the build with signing not available message.
   
2. Add the following lines to your project's build.xml file:

   <property name="Signing.Library" value="sign-local.xml"/>
   <import file="${Signing.Library}"/>
   
   The way this works is that by default, Signing.Library property points to
   sign-local.xml file described in #1. On Hudson, set Signing.Library property
   in your job configuration to ###sign-hudson.xml##. 
   
3. To perform signing, add the following at the appropriate point in your build:

   <Sign Project="${P}" Job="${J}" File="${F}" Output="${O}"/>
   
   P is the official name of your Eclipse Foundation's project as used
   by IT. May take some experimentation to figure this one out or e-mail
   webmaster@eclipse.org for help. It has to match the folder your project has 
   been assigned under /home/data/httpd/download-staging.priv/ folder. 
   
   J is under your control. A good strategy is to use Hudson job name. Don't
   re-use same value for J for any processes that can run in parallel. Don't use
   highly temporal values for J (such as versions with qualifiers) as you will
   end up with a bunch of garbage in your download-staging.priv folder over time.
   
   F is a path to a JAR file or a ZIP file containing JAR files. This is the input
   to the signing process. 
   
   O is a path where the output is going to be written. Can be the same as F is you
   want the input file to be overridden.
   
   Also don't forget to check a flag that tells you whether signing should be invoked.
   In most situations, signing should be treated as an optional operation.
   
   If the ZIP file being signed is already a p2 repository, keep in mind that signing
   will break the checksums stored in p2 metadata. Either generate your p2 metadata
   after signing or invoke the following p2 task to update the checksums:
   
   <p2.process.artifacts repositoryPath="file://${repo}" pack="true"/> 

--> 

<project name="sign">

  <macrodef name="Sign">
    <attribute name="Project"/>
    <attribute name="Job"/>
    <attribute name="File"/>
    <attribute name="Output"/>
    <sequential>

      <echo message="Signing @{File}..."/>
      
      <stopwatch name="signing"/>
      
      <var name=".Sign.FileName" unset="true"/>
      <var name=".Sign.Work.Folder" unset="true"/>

      <basename property=".Sign.FileName" file="@{File}"/>
      <property name=".Sign.Work.Folder" value="/home/data/httpd/download-staging.priv/@{Project}/signing/@{Job}"/>
    
      <delete dir="${.Sign.Work.Folder}" quiet="true"/>
      <mkdir dir="${.Sign.Work.Folder}"/>
      
      <copy file="@{File}" tofile="${.Sign.Work.Folder}/${.Sign.FileName}"/>
      
      <exec dir="${.Sign.Work.Folder}" executable="/bin/bash" output="signing.txt">
        <arg line="/usr/bin/sign ${.Sign.Work.Folder}/${.Sign.FileName} nomail ${.Sign.Work.Folder}/output"/>
      </exec>
      
      <waitfor maxwait="60" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
        <available file="${.Sign.Work.Folder}/output/${.Sign.FileName}"/>
      </waitfor>
      
      <if>
        <not><available file="${.Sign.Work.Folder}/output/${.Sign.FileName}"/></not>
        <then>
          <fail message="Timed out waiting for signing service."/>
        </then>
      </if>
      
      <copy file="${.Sign.Work.Folder}/output/${.Sign.FileName}" tofile="@{Output}"/>
      
      <delete dir="${.Sign.Work.Folder}"/>
      
      <var name=".Sign.FileName" unset="true"/>
      <var name=".Sign.Work.Folder" unset="true"/>

      <echo message="Signing completed. Result copied to @{File}."/>

      <stopwatch name="signing" action="total"/>

    </sequential>
  </macrodef>

</project>
