/* Generated By:JJTree&JavaCC: Do not edit this line. QuickSQLParserTokenManager.java */
package org.eclipse.datatools.enablement.sybase.parser;

public class QuickSQLParserTokenManager implements QuickSQLParserConstants
{
            int commentNestingDepth = 0 ;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffc000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0xffffffffffffffffL) != 0L || (active3 & 0xffL) != 0L)
         {
            jjmatchedKind = 211;
            return 68;
         }
         if ((active3 & 0x100000000L) != 0L)
            return 69;
         return -1;
      case 1:
         if ((active0 & 0x101c0000L) != 0L || (active1 & 0x19fc0001ff830000L) != 0L || (active2 & 0x1000000000000L) != 0L)
            return 68;
         if ((active0 & 0xffffffffefe3c000L) != 0L || (active1 & 0xe603fffe007cffffL) != 0L || (active2 & 0xfffeffffffffffffL) != 0L || (active3 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 211;
               jjmatchedPos = 1;
            }
            return 68;
         }
         return -1;
      case 2:
         if ((active0 & 0x3fffffffefa08000L) != 0L || (active1 & 0x97c379f57e7ee7ffL) != 0L || (active2 & 0xf9fef7e7ffffffffL) != 0L || (active3 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 211;
               jjmatchedPos = 2;
            }
            return 68;
         }
         if ((active0 & 0xc0000000004b4000L) != 0L || (active1 & 0x6018860a00001800L) != 0L || (active2 & 0x600081800000000L) != 0L)
            return 68;
         return -1;
      case 3:
         if ((active0 & 0x3542000048000000L) != 0L || (active1 & 0x834301d44002e058L) != 0L || (active2 & 0x44066081c803870eL) != 0L || (active3 & 0x19L) != 0L)
            return 68;
         if ((active0 & 0x8abdffffa7a08000L) != 0L || (active1 & 0x549078213e7c17a7L) != 0L || (active2 & 0xb9f8977637fc78f1L) != 0L || (active3 & 0xe6L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 211;
               jjmatchedPos = 3;
            }
            return 68;
         }
         return -1;
      case 4:
         if ((active0 & 0x82bdeffc25200000L) != 0L || (active1 & 0x44927801387094b7L) != 0L || (active2 & 0xb1dcc77637df7eb5L) != 0L || (active3 & 0xe0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 211;
               jjmatchedPos = 4;
            }
            return 68;
         }
         if ((active0 & 0x800100382808000L) != 0L || (active1 & 0x10000020060c0300L) != 0L || (active2 & 0x820100000200040L) != 0L || (active3 & 0x6L) != 0L)
            return 68;
         return -1;
      case 5:
         if ((active0 & 0x20a01004000000L) != 0L || (active1 & 0x4482080008100023L) != 0L || (active2 & 0x1140042607101000L) != 0L)
            return 68;
         if ((active0 & 0x829d4fed21200000L) != 0L || (active1 & 0x10700130609494L) != 0L || (active2 & 0xa09cc35030cf6eb5L) != 0L || (active3 & 0xe0L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 211;
               jjmatchedPos = 5;
            }
            return 68;
         }
         return -1;
      case 6:
         if ((active0 & 0x285070d00200000L) != 0L || (active1 & 0x700120608484L) != 0L || (active2 & 0x94c340308f4e85L) != 0L || (active3 & 0xa0L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 6;
            return 68;
         }
         if ((active0 & 0x801848e021000000L) != 0L || (active1 & 0x10000010001010L) != 0L || (active2 & 0xa008001002402030L) != 0L || (active3 & 0x40L) != 0L)
            return 68;
         return -1;
      case 7:
         if ((active0 & 0x201020800000000L) != 0L || (active1 & 0x100000608080L) != 0L || (active2 & 0x10804030030000L) != 0L || (active3 & 0x80L) != 0L)
            return 68;
         if ((active0 & 0x84050500200000L) != 0L || (active1 & 0x600120000404L) != 0L || (active2 & 0x844300008c4e85L) != 0L || (active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 7;
            return 68;
         }
         return -1;
      case 8:
         if ((active0 & 0x84050100200000L) != 0L || (active1 & 0x600000000400L) != 0L || (active2 & 0x840300008c0c80L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 8;
            return 68;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x120000004L) != 0L || (active2 & 0x400000004205L) != 0L || (active3 & 0x20L) != 0L)
            return 68;
         return -1;
      case 9:
         if ((active0 & 0x4050100000000L) != 0L || (active1 & 0x200000000400L) != 0L || (active2 & 0x30000080080L) != 0L)
            return 68;
         if ((active0 & 0x80000000200000L) != 0L || (active1 & 0x400000000000L) != 0L || (active2 & 0x84000000840c00L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 9;
            return 68;
         }
         return -1;
      case 10:
         if ((active0 & 0x80000000200000L) != 0L || (active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 10;
            return 68;
         }
         if ((active2 & 0x84000000840c00L) != 0L)
            return 68;
         return -1;
      case 11:
         if ((active0 & 0x80000000200000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 11;
            return 68;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 68;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L, 0x10000000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x200000000L);
      case 40:
         jjmatchedKind = 234;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000000L);
      case 41:
         return jjStopAtPos(0, 235);
      case 42:
         jjmatchedKind = 236;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000000000L);
      case 43:
         return jjStopAtPos(0, 238);
      case 44:
         return jjStopAtPos(0, 222);
      case 45:
         jjmatchedKind = 239;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 224, 69);
      case 47:
         jjmatchedKind = 237;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 223);
      case 60:
         jjmatchedKind = 227;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000L);
      case 61:
         jjmatchedKind = 231;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4000000000000L);
      case 62:
         jjmatchedKind = 229;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8004000000000L);
      case 63:
         return jjStopAtPos(0, 240);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fc000L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1f800000L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xffffe0000000L, 0x0L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1fff000000000000L, 0x0L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x1ffL, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ffc00000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00000000000L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffc000000000000L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fffL, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffffc000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfff00000000L, 0xc0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff00000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe0000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7000000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x3fL);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000L);
      case 126:
         return jjStopAtPos(0, 226);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0L);
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 242);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L);
      case 45:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 228);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 230);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 232);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 241);
         break;
      case 62:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 243);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000060000000L, active1, 0x120200100000L, active2, 0xb000100100004001L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xfc000001800000L, active1, 0x2800000200L, active2, 0xe01c07ff8006L, active3, 0L);
      case 70:
      case 102:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 68);
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000000000000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L, active1, 0L, active2, 0x6000000000L, active3, 0x7L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000000L, active1, 0x45000000400L, active2, 0x4000000000000000L, active3, 0x8L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000600008000L, active1, 0L, active2, 0x8L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000030000L, active1, 0x1c000007e000000L, active2, 0xe0000000000000L, active3, 0L);
      case 79:
      case 111:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 176, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0x1ff800000000L, active1, 0xe98400221800L, active2, 0x8078000000L, active3, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600000000000000L, active2, 0x100000000000000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400200006000000L, active1, 0x10000000000c2000L, active2, 0x1e000000000ff0L, active3, 0x200000020L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x100000001L, active2, 0xe00000000000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x70000000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800c00008200000L, active1, 0x600300000000c000L, active2, 0x80080003000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x8000000000000100L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xfeL, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 68);
         break;
      case 124:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 221);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 233);
         break;
      case 94:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000L, active1, 0x8000040000L, active2, 0x6012000038008L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000001000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000000000L, active1, 0x40010000000007L, active2, 0x40000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 68);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 68);
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x1000080002000000L, active2, 0x100000000000000L, active3, 0L);
      case 69:
      case 101:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200182000000L, active1, 0x8200000000400118L, active2, 0x4400000000000010L, active3, 0x3L);
      case 70:
      case 102:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x10000000000000L, active2, 0x80000L, active3, 0L);
      case 71:
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0x200000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000060L, active2, 0x88680000000060e0L, active3, 0x24L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000008000000L, active1, 0x183001000200400L, active2, 0x1000000498000000L, active3, 0xc0L);
      case 77:
      case 109:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 171, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800003000000000L, active1, 0L, active2, 0x608000100000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0xfc000000000L, active1, 0x40000000c000L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000204000000L, active1, 0x104082000L, active2, 0x200f00L, active3, 0x200000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000c00000L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0x1000L, active2, 0x2000060000000007L, active3, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2340000060000000L, active1, 0x18000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 68);
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x81000001208000L, active1, 0x4400100060020280L, active2, 0x1003000000L, active3, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1, 0L, active2, 0x10004000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000100000L, active2, 0x104000000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x60000000L, active3, 0L);
      case 88:
      case 120:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 68);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x11200002000000L, active1, 0x1L, active2, 0x180000000000000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 68);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 68);
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1a0000000L, active1, 0x400000008210L, active2, 0x20000600L, active3, 0x40L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 68);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0x30000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 68);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 68);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 68);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 68);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 68);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 68);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 68);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000008000L, active1, 0x100000202a001082L, active2, 0x600082000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 72:
      case 104:
         if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 195, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x480180000100000L, active2, 0x60000000000L, active3, 0L);
      case 75:
      case 107:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 68);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 68);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 68);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 68);
         break;
      case 76:
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 68);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc000800000000L, active1, 0x2000100000404L, active2, 0x100010c01000L, active3, 0x4L);
      case 77:
      case 109:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 68);
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800001000000000L, active1, 0L, active2, 0x24L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 68);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 68);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 68);
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x108000000000L, active1, 0x440100L, active2, 0x814000000000040L, active3, 0L);
      case 79:
      case 111:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 68);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0x20000004140000L, active3, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 68);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 68);
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x4000000000000000L, active2, 0x400000000010L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000000000L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 68);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 186, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0x2000200000L, active3, 0x2L);
      case 83:
      case 115:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 158, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x810600000000L, active1, 0x10000000000020L, active2, 0x4000L, active3, 0x80L);
      case 84:
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x8200060000000000L, active1, 0x10000000L, active2, 0x8000814000000001L, active3, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4080000L, active2, 0x1000001003000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0x80L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L, active1, 0L, active2, 0L, active3, 0x200000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000020000000L, active1, 0x110000000L, active2, 0x400034L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10000400000000L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 68);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 68);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 68);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 194, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x488801000000L, active1, 0x10000000000000L, active2, 0x1000002000004600L, active3, 0x20L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000400L, active2, 0x8000000000000000L, active3, 0L);
      case 71:
      case 103:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 68);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 187, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 72:
      case 104:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 68);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200025000000000L, active1, 0x2000000001000L, active2, 0x2000010000801081L, active3, 0L);
      case 75:
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 68);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x600000200000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 68);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 181, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000100000L, active2, 0x20000040000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000200000L, active1, 0x400100000000000L, active2, 0x400020000000L, active3, 0x40L);
      case 80:
      case 112:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x3L, active2, 0x40000010000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 68);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x8080040000000000L, active1, 0x28000080L, active2, 0x80000003080000L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L, active2, 0x4801000002000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 68);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 68);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 68);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 68);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x20210400000000L, active1, 0x408020L, active2, 0x100000000020000L, active3, 0x200000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10002000000000L, active1, 0x4000000000000014L, active2, 0x40000000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 88:
      case 120:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 68);
         break;
      case 89:
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 65:
      case 97:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x8001000000000000L, active1, 0x400L, active2, 0x14000010010000L, active3, 0x80L);
      case 67:
      case 99:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 140, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L, active2, 0xc02000L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0x200000000000L, active2, 0x200L, active3, 0x40L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 68);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 68);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 68);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 68);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 68);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 148, 68);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 68);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 68);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 68);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 184, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x401000000L, active1, 0L, active2, 0x80010000a0000L, active3, 0L);
      case 70:
      case 102:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L, active2, 0x20000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x408000L, active2, 0x800000000000L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x10000000L, active2, 0x80L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 68);
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200420000000000L, active1, 0x100000000080L, active2, 0x2000000002000004L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000000000L, active1, 0x200000L, active2, 0x8000004000000000L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x8094000200000L, active1, 0L, active2, 0x400000004030L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 68);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 188, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x20000004L, active2, 0x10000000400L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 68);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 68);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 68);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 68);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 162, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x10000100000010L, active2, 0x80000000000001L, active3, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0x20000000L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x100000000080L, active2, 0x400000800000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000800000000L, active1, 0x200400L, active2, 0x4000010000000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 68);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 68);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 68);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 68);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 132, 68);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 141, 68);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 150, 68);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 198, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0x84L, active3, 0x20L);
      case 71:
      case 103:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 189, 68);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000200000L, active1, 0x100000004L, active2, 0x80000000040001L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 68);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 68);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 68);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20080000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8000L, active2, 0L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L);
      case 82:
      case 114:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 68);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 68);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 191, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 68);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 153, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0x400000000000L, active2, 0x20000010400L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 68);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 68);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 68);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x10010000000800L, active3, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L, active2, 0x200L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 133, 68);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0L, active2, 0x800L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0x80000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 68);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 68);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 68);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 175, 68);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 68);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 199, 68);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 225);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40080L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10100000000L, active1, 0L, active2, 0x30000000000L, active3, 0L);
      case 75:
      case 107:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 85, 68);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 156, 68);
         break;
      case 76:
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 68);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 68);
         break;
      case 78:
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 68);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 68);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L, active1, 0L, active2, 0x4L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200100000000L, active2, 0x4001L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0x400000000200L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 68);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 144, 68);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 145, 68);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 157, 68);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000400L, active2, 0x84000000800000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 89:
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 68);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L, active2, 0L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0x10000000000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 68);
         break;
      case 69:
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 68);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 68);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0x80080L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active1, 0L, active2, 0x84000000800000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 96, 68);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 68);
         return jjMoveStringLiteralDfa9_0(active0, 0x10100000000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0x400L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 142, 68);
         break;
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 93, 68);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 130, 68);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 197, 68);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 68);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 68);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 169, 68);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 75:
      case 107:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 109, 68);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x84000000800000L);
      case 82:
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(9, 74, 68);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L, active2, 0x40000L);
      case 83:
      case 115:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(9, 135, 68);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 147, 68);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 168, 68);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 68);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 68);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 139, 68);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 146, 68);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 151, 68);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 178, 68);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 183, 68);
         break;
      case 84:
      case 116:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 138, 68);
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 110, 68);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 55, 68);
         break;
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 21, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x2800000000L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 210)
                        kind = 210;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 204)
                        kind = 204;
                     jjCheckNAddTwoStates(58, 59);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 203)
                        kind = 203;
                     jjCheckNAddStates(0, 8);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(58, 17);
                  else if (curChar == 35)
                     jjCheckNAdd(44);
                  else if (curChar == 36)
                     jjAddStates(9, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjCheckNAddStates(14, 16);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 68:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  else if (curChar == 58)
                  {
                     if (kind > 215)
                        kind = 215;
                  }
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAdd(64);
                  }
                  break;
               case 1:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 2:
                  if (curChar == 39)
                     jjCheckNAddStates(17, 19);
                  break;
               case 3:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 5:
                  if (curChar == 39 && kind > 206)
                     kind = 206;
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 8:
                  if (curChar == 34)
                     jjCheckNAddStates(20, 22);
                  break;
               case 9:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 11:
                  if (curChar == 34 && kind > 207)
                     kind = 207;
                  break;
               case 12:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 208)
                     kind = 208;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 36)
                     jjAddStates(9, 10);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddStates(23, 26);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar != 46)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAdd(31);
                  break;
               case 34:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 37:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAdd(41);
                  break;
               case 43:
                  if (curChar == 35)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAdd(44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  jjCheckNAddStates(0, 8);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar != 46)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(58, 17);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 204)
                     kind = 204;
                  jjCheckNAdd(61);
                  break;
               case 64:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAdd(64);
                  break;
               case 66:
                  if ((0x3ff001800000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar == 58 && kind > 215)
                     kind = 215;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAddStates(29, 33);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 91)
                     jjCheckNAdd(33);
                  if (curChar == 64)
                     jjCheckNAdd(37);
                  break;
               case 68:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAdd(64);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAddTwoStates(63, 64);
                  }
                  break;
               case 1:
                  jjCheckNAddStates(14, 16);
                  break;
               case 4:
                  jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  jjCheckNAddStates(11, 13);
                  break;
               case 10:
                  jjCheckNAddStates(20, 22);
                  break;
               case 13:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 208)
                     kind = 208;
                  jjCheckNAdd(14);
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 32:
                  if (curChar == 91)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 34:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 93 && kind > 212)
                     kind = 212;
                  break;
               case 36:
                  if (curChar == 64)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if (curChar == 64)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 44:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddStates(29, 33);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 66:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 10);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAddStates(29, 33);
                  }
                  break;
               case 68:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAddTwoStates(63, 64);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 211)
                        kind = 211;
                     jjCheckNAdd(64);
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(34, 36);
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(14, 16);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(17, 19);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(11, 13);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(20, 22);
                  break;
               case 15:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 10);
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(43, 45);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 37:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 216)
                     kind = 216;
                  jjCheckNAdd(41);
                  break;
               case 44:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 62:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddStates(29, 33);
                  break;
               case 63:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 211)
                     kind = 211;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(34, 36);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(66, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 68 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_4(0x100L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return 1;
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 126:
         return jjStopAtPos(0, 201);
      default :
         return jjMoveNfa_5(2, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 126)
                  {
                     if (kind > 202)
                        kind = 202;
                  }
                  break;
               case 0:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 126)
                     kind = 202;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 47, 48, 53, 54, 22, 23, 28, 29, 16, 21, 7, 9, 11, 1, 3, 
   5, 3, 4, 5, 9, 10, 11, 22, 23, 28, 29, 34, 35, 63, 64, 65, 
   66, 67, 65, 66, 67, 19, 20, 26, 27, 30, 31, 33, 34, 35, 51, 52, 
   55, 56, 60, 61, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null,  //$NON-NLS-1$
"\41\45\136\46", null, null, null, null, null, null, null, null, null, null, null, null, null,  //$NON-NLS-1$
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\15\12", "\176", null, null, null, null, null, null,  //$NON-NLS-1$ //$NON-NLS-2$
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\174\174", "\54", "\73", "\56", null, "\176", "\74", "\74\75", "\76", "\76\75", "\75",    //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$
"\41\75", "\50\53\51", "\50", "\51", "\52", "\57", "\53", "\55", "\77", "\52\75", //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$ //$NON-NLS-6$ //$NON-NLS-7$ //$NON-NLS-8$ //$NON-NLS-9$ //$NON-NLS-10$
"\75\52", "\76\76", }; //$NON-NLS-1$ //$NON-NLS-2$
public static final String[] lexStateNames = {
   "DEFAULT",  //$NON-NLS-1$
   "IN_SINGLE_LINE_COMMENT",  //$NON-NLS-1$
   "IN_MULTI_LINE_COMMENT",  //$NON-NLS-1$
   "IGNORE_STATE",  //$NON-NLS-1$
   "DESCRIPTION_START_STATE",  //$NON-NLS-1$
   "DESCRIPTION_STATE",  //$NON-NLS-1$
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   5, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffe3dddfffL, 
};
static final long[] jjtoSkip = {
   0x145eL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x440L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xba0L, 0x0L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[68];
private final int[] jjstateSet = new int[136];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public QuickSQLParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."); //$NON-NLS-1$
   input_stream = stream;
}
public QuickSQLParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE); //$NON-NLS-1$ //$NON-NLS-2$
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage(); //$NON-NLS-1$
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage(); //$NON-NLS-1$
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                commentNestingDepth -= 1;
            SwitchTo( commentNestingDepth==0 ? DEFAULT : IN_MULTI_LINE_COMMENT );
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 8 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         commentNestingDepth = 1 ;
         break;
      case 9 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                                    commentNestingDepth += 1 ;
         break;
      default : 
         break;
   }
}
}
