/*
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.eclipse.datatools.sqltools.parsers.sql.lexer;

public class SQLLexerprs implements lpg.lpgjavaruntime.ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,3,2,1,2,3,2,
            1,2,1,1,1,1,2,3,1,2,
            2,2,1,2,2,3,2,3,3,6,
            1,0,3,3,2,0,1,2,3,2,
            0,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,2,
            1,1,3,3,1,2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            21,21,22,22,22,22,22,22,22,22,
            22,22,22,22,22,29,23,36,36,31,
            8,8,7,7,7,24,24,38,38,37,
            37,39,39,25,25,40,5,5,41,42,
            42,26,26,26,43,43,43,12,12,12,
            27,6,6,44,44,44,44,45,45,28,
            47,47,4,4,4,4,4,2,2,2,
            2,2,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,1,1,
            1,1,1,1,1,1,1,1,14,14,
            14,14,14,14,11,11,35,35,35,35,
            35,35,35,35,35,35,35,35,35,35,
            35,35,35,35,49,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,17,17,17,
            17,17,17,17,17,17,17,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,46,
            46,46,46,13,13,13,13,19,19,48,
            48,48,48,48,48,48,48,48,10,10,
            10,10,10,9,9,9,9,9,9,9,
            20,30,30,30,30,32,33,34,631,36,
            22,67,20,336,8,307,312,710,24,23,
            67,791,989,22,67,912,21,913,429,315,
            1,2,3,4,5,6,7,9,10,11,
            12,13,14,15,16,18,867,37,33,34,
            915,340,79,284,283,67,749,129,42,901,
            37,27,41,1,279,278,67,281,850,114,
            285,287,288,31,237,284,283,67,996,40,
            280,128,115,28,317,264,263,67,266,995,
            364,924,285,287,288,945,37,55,956,37,
            265,127,393,159,279,278,67,281,553,260,
            259,67,262,32,475,264,263,67,266,1000,
            280,698,36,261,833,114,349,53,421,404,
            265,395,270,269,67,39,967,37,115,752,
            24,23,67,991,1002,374,273,20,21,50,
            998,434,879,36,54,890,36,385,934,36,
            388,978,37,426,934,36,358,1003,1009,451,
            997,1011,1012,472,472,472,472,472,472,60,
            472,472
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,0,0,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,0,0,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,0,0,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,0,67,
            68,69,70,71,72,73,74,75,76,77,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,0,1,2,
            3,4,5,6,7,8,9,10,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,0,40,
            41,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            0,40,41,0,0,0,0,0,50,0,
            0,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,0,
            40,41,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,0,1,2,3,
            4,5,6,7,8,9,10,11,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,0,0,0,0,52,0,
            0,0,0,0,46,11,0,0,0,17,
            0,0,54,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,66,
            0,80,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,39,0,39,
            42,43,42,43,0,0,48,49,48,49,
            39,47,47,42,43,46,44,53,51,48,
            49,55,56,45,44,0,45,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            472,570,571,572,573,574,575,576,577,578,
            579,548,544,545,546,547,549,567,550,551,
            552,553,554,555,556,557,558,559,560,561,
            562,563,564,565,566,568,569,540,543,534,
            542,541,535,536,457,684,669,696,537,538,
            686,691,693,695,668,671,672,697,698,682,
            683,689,690,692,694,670,673,674,679,675,
            676,677,678,680,681,685,687,688,472,570,
            571,572,573,574,575,576,577,578,579,548,
            544,545,546,547,549,567,550,551,552,553,
            554,555,556,557,558,559,560,561,562,563,
            564,565,566,568,569,540,543,758,542,541,
            739,740,728,458,700,726,56,61,716,721,
            723,725,699,702,703,727,729,713,714,719,
            720,722,724,701,704,705,710,706,707,708,
            709,711,712,715,717,718,730,761,472,570,
            571,572,573,574,575,576,577,578,579,548,
            544,545,546,547,549,567,550,551,552,553,
            554,555,556,557,558,559,560,561,562,563,
            564,565,566,568,569,540,543,534,542,541,
            535,536,461,684,669,696,537,538,686,691,
            693,695,668,671,672,697,698,682,683,689,
            690,692,694,670,673,674,679,675,676,677,
            678,680,681,685,687,688,472,570,571,572,
            573,574,575,576,577,578,579,548,544,545,
            546,547,549,567,550,551,552,553,554,555,
            556,557,558,559,560,561,562,563,564,565,
            566,568,569,540,543,758,542,541,739,740,
            728,462,700,726,472,472,716,721,723,725,
            699,702,703,727,729,713,714,719,720,722,
            724,701,704,705,710,706,707,708,709,711,
            712,715,717,718,730,761,472,570,571,572,
            573,574,575,576,577,578,579,548,544,545,
            546,547,549,567,550,551,552,553,554,555,
            556,557,558,559,560,561,562,563,564,565,
            566,568,569,540,543,534,542,541,535,536,
            666,652,639,664,537,538,654,659,661,663,
            638,640,641,665,667,650,651,657,658,660,
            662,398,529,642,647,643,644,645,646,648,
            649,653,655,656,59,570,571,572,573,574,
            575,576,577,578,579,548,544,545,546,547,
            549,567,550,551,552,553,554,555,556,557,
            558,559,560,561,562,563,564,565,566,568,
            569,540,543,743,542,541,472,472,636,622,
            608,634,746,747,624,629,631,633,607,610,
            611,635,637,620,621,627,628,630,632,609,
            744,612,617,613,614,615,616,618,619,623,
            625,626,749,748,472,570,571,572,573,574,
            575,576,577,578,579,548,544,545,546,547,
            549,567,550,551,552,553,554,555,556,557,
            558,559,560,561,562,563,564,565,566,568,
            569,540,543,534,542,541,535,536,666,652,
            639,664,537,538,654,659,661,663,638,640,
            641,665,667,650,651,657,658,660,662,433,
            530,642,647,643,644,645,646,648,649,653,
            655,656,472,570,571,572,573,574,575,576,
            577,578,579,548,544,545,546,547,549,567,
            550,551,552,553,554,555,556,557,558,559,
            560,561,562,563,564,565,566,568,569,540,
            543,534,542,541,535,536,636,622,608,634,
            537,538,624,629,631,633,607,610,611,635,
            637,620,621,627,628,630,632,609,472,612,
            617,613,614,615,616,618,619,623,625,626,
            52,317,571,572,573,574,575,576,577,578,
            579,548,544,545,546,547,549,567,550,551,
            552,553,554,555,556,557,558,559,560,561,
            562,563,564,565,566,568,569,540,543,534,
            542,541,535,536,353,342,409,594,537,538,
            346,440,411,368,588,592,593,769,311,596,
            597,763,764,595,379,381,590,134,570,571,
            572,573,574,575,576,577,578,579,767,17,
            570,571,572,573,574,575,576,577,578,579,
            548,544,545,546,547,549,567,550,551,552,
            553,554,555,556,557,558,559,560,561,562,
            563,564,565,566,568,569,540,543,472,542,
            541,296,570,571,572,573,574,575,576,577,
            578,579,548,544,545,546,547,549,567,550,
            551,552,553,554,555,556,557,558,559,560,
            561,562,563,564,565,566,568,569,540,543,
            472,542,541,472,472,472,472,472,605,472,
            472,548,544,545,546,547,549,567,550,551,
            552,553,554,555,556,557,558,559,560,561,
            562,563,564,565,566,568,569,540,543,472,
            542,541,472,570,571,572,573,574,575,576,
            577,578,579,584,580,581,582,583,585,38,
            570,571,572,573,574,575,576,577,578,579,
            584,580,581,582,583,585,35,570,571,572,
            573,574,575,576,577,578,579,442,472,570,
            571,572,573,574,575,576,577,578,579,45,
            570,571,572,573,574,575,576,577,578,579,
            44,570,571,572,573,574,575,576,577,578,
            579,472,98,472,43,472,472,472,445,472,
            472,472,472,119,454,442,472,472,472,414,
            472,472,448,472,570,571,572,573,574,575,
            576,577,578,579,47,570,571,572,573,574,
            575,576,577,578,579,46,570,571,572,573,
            574,575,576,577,578,579,49,570,571,572,
            573,574,575,576,577,578,579,48,570,571,
            572,573,574,575,576,577,578,579,19,391,
            52,471,472,472,127,128,472,126,472,117,
            472,51,30,472,472,472,472,472,26,472,
            29,25,472,472,472,472,472,472,472,472,
            472,472,472,472,472,472,472,534,472,534,
            535,536,535,536,472,472,537,538,537,538,
            534,602,603,535,536,371,754,604,460,537,
            538,765,766,762,754,472,762
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 44,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 769,
           MAX_LA            = 1,
           NUM_RULES         = 297,
           NUM_NONTERMINALS  = 50,
           NUM_SYMBOLS       = 130,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 298,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 471,
           ERROR_ACTION      = 472;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
