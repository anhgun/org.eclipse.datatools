/*
 * This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.eclipse.datatools.sqltools.parsers.sql.lexer;

public class SQLLexerprs implements lpg.lpgjavaruntime.ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,2,2,4,3,2,1,2,
            3,2,1,2,1,1,1,1,2,3,
            1,2,2,2,1,2,2,3,2,3,
            3,6,1,0,3,3,2,0,1,2,
            3,2,0,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,1,1,1,1,1,1,1,
            2,1,1,2,1,1,3,3,1,2,
            1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            22,22,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,30,24,38,38,
            32,12,12,11,11,11,36,25,25,13,
            13,39,39,40,40,26,26,41,5,5,
            42,43,43,27,27,27,44,44,44,16,
            16,16,28,10,10,45,45,45,45,46,
            46,29,48,48,4,4,4,4,4,2,
            2,2,2,2,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            1,1,1,1,1,1,1,1,1,1,
            18,18,18,18,18,18,15,15,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,37,37,37,37,37,
            37,37,37,37,37,50,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,20,20,20,
            20,20,20,20,20,20,20,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            7,7,7,7,7,7,7,7,7,7,
            47,47,47,47,17,17,17,17,8,8,
            49,49,49,49,49,49,49,49,49,14,
            14,14,14,14,6,6,6,6,6,6,
            6,6,6,6,9,31,31,31,31,33,
            34,35,791,38,23,69,21,367,870,25,
            24,69,8,318,329,917,25,24,69,1176,
            1110,39,782,22,332,1,2,3,4,5,
            6,7,9,10,11,12,13,14,15,16,
            17,19,868,35,36,1183,382,1,295,294,
            69,1189,131,29,296,298,299,1042,39,604,
            394,161,295,294,69,1025,116,29,296,298,
            299,603,967,44,412,321,290,289,69,292,
            42,1132,39,117,81,295,294,69,43,33,
            30,296,298,299,1143,39,291,477,275,274,
            69,277,241,295,294,69,1190,438,30,296,
            298,299,1154,39,57,428,407,276,399,290,
            289,69,292,713,271,270,69,273,555,281,
            280,69,34,635,275,274,69,277,1177,291,
            1008,116,272,443,1165,39,961,284,23,69,
            55,964,1178,276,1088,41,21,325,117,1184,
            1065,38,52,22,469,330,1054,38,1076,38,
            56,391,865,404,1121,38,888,62,1181,422,
            1121,38,966,375,1185,454,1087,914,1188,1090,
            861,1179,1187,505,505
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,0,0,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,0,70,71,72,73,74,75,76,77,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            0,80,0,0,0,0,0,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,19,0,19,0,
            0,0,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,0,45,46,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,69,0,19,0,0,51,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            0,45,46,0,0,0,0,0,0,56,
            57,11,12,13,14,15,16,11,0,19,
            0,18,17,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,0,45,46,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,0,1,2,3,4,5,6,7,8,
            9,10,11,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,0,0,0,
            0,0,0,0,0,54,0,0,0,0,
            0,0,0,17,51,18,17,20,55,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,17,21,22,21,22,
            18,0,20,17,21,22,18,18,20,20,
            0,0,0,0,0,0,0,0,0,44,
            0,44,0,48,49,48,49,44,52,47,
            0,48,49,53,50,47,47,50,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,496,770,602,
            769,807,808,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,802,577,576,768,783,784,
            772,744,760,765,767,743,746,747,771,773,
            750,753,756,757,758,763,764,766,745,748,
            749,754,751,752,755,759,761,762,774,805,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,499,770,602,
            769,807,808,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,802,577,576,768,783,784,
            772,744,760,765,767,743,746,747,771,773,
            750,753,756,757,758,763,764,766,745,748,
            749,754,751,752,755,759,761,762,774,805,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,501,770,602,
            769,807,808,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,802,577,576,768,783,784,
            772,744,760,765,767,743,746,747,771,773,
            750,753,756,757,758,763,764,766,745,748,
            749,754,751,752,755,759,761,762,774,805,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,502,770,602,
            769,807,808,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,802,577,576,768,783,784,
            772,744,760,765,767,743,746,747,771,773,
            750,753,756,757,758,763,764,766,745,748,
            749,754,751,752,755,759,761,762,774,805,
            505,605,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,728,740,602,
            739,572,573,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,569,577,576,738,570,571,
            494,713,730,735,737,712,715,716,741,742,
            719,722,725,726,727,733,734,736,714,717,
            718,723,720,721,724,729,731,732,505,605,
            606,607,608,609,610,611,612,613,614,583,
            579,580,581,582,584,728,740,602,739,572,
            573,585,586,587,588,589,590,591,592,593,
            594,595,596,597,598,599,600,601,603,604,
            575,578,569,577,576,738,570,571,498,713,
            730,735,737,712,715,716,741,742,719,722,
            725,726,727,733,734,736,714,717,718,723,
            720,721,724,729,731,732,505,605,606,607,
            608,609,610,611,612,613,614,583,579,580,
            581,582,584,696,708,602,707,572,573,585,
            586,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,603,604,575,578,
            569,577,576,706,570,571,710,683,698,703,
            705,682,684,685,709,711,687,690,693,694,
            695,701,702,704,433,564,686,691,688,689,
            692,697,699,700,61,605,606,607,608,609,
            610,611,612,613,614,583,579,580,581,582,
            584,666,678,602,677,790,791,585,586,587,
            588,589,590,591,592,593,594,595,596,597,
            598,599,600,601,603,604,575,578,787,577,
            576,676,58,63,680,652,668,673,675,651,
            654,655,679,681,657,660,663,664,665,671,
            672,674,653,788,656,661,658,659,662,667,
            669,670,793,792,505,605,606,607,608,609,
            610,611,612,613,614,583,579,580,581,582,
            584,696,708,602,707,572,573,585,586,587,
            588,589,590,591,592,593,594,595,596,597,
            598,599,600,601,603,604,575,578,569,577,
            576,706,570,571,710,683,698,703,705,682,
            684,685,709,711,687,690,693,694,695,701,
            702,704,462,565,686,691,688,689,692,697,
            699,700,505,605,606,607,608,609,610,611,
            612,613,614,583,579,580,581,582,584,666,
            678,602,677,572,573,585,586,587,588,589,
            590,591,592,593,594,595,596,597,598,599,
            600,601,603,604,575,578,569,577,576,676,
            570,571,680,652,668,673,675,651,654,655,
            679,681,657,660,663,664,665,671,672,674,
            653,505,656,661,658,659,662,667,669,670,
            54,352,606,607,608,609,610,611,612,613,
            614,583,579,580,581,582,584,357,629,492,
            461,572,573,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,569,577,576,464,570,571,
            385,486,448,488,470,623,627,628,816,456,
            416,361,355,631,632,810,811,630,482,625,
            301,504,505,505,121,505,505,100,814,18,
            605,606,607,608,609,610,611,612,613,614,
            583,579,580,581,582,584,450,119,602,505,
            505,505,585,586,587,588,589,590,591,592,
            593,594,595,596,597,598,599,600,601,603,
            604,575,578,505,577,576,310,605,606,607,
            608,609,610,611,612,613,614,583,579,580,
            581,582,584,381,505,602,505,505,369,585,
            586,587,588,589,590,591,592,593,594,595,
            596,597,598,599,600,601,603,604,575,578,
            505,577,576,130,505,97,45,505,505,812,
            813,583,579,580,581,582,584,476,505,602,
            505,638,371,585,586,587,588,589,590,591,
            592,593,594,595,596,597,598,599,600,601,
            603,604,575,578,505,577,576,505,605,606,
            607,608,609,610,611,612,613,614,619,615,
            616,617,618,620,40,605,606,607,608,609,
            610,611,612,613,614,619,615,616,617,618,
            620,37,605,606,607,608,609,610,611,612,
            613,614,476,505,605,606,607,608,609,610,
            611,612,613,614,145,605,606,607,608,609,
            610,611,612,613,614,47,605,606,607,608,
            609,610,611,612,613,614,28,129,505,27,
            505,505,505,505,505,478,505,505,505,505,
            505,505,505,500,490,637,500,639,484,46,
            605,606,607,608,609,610,611,612,613,614,
            505,605,606,607,608,609,610,611,612,613,
            614,49,605,606,607,608,609,610,611,612,
            613,614,48,605,606,607,608,609,610,611,
            612,613,614,51,605,606,607,608,609,610,
            611,612,613,614,50,605,606,607,608,609,
            610,611,612,613,614,20,505,54,505,505,
            128,505,505,53,32,505,26,31,505,505,
            505,505,505,505,505,500,572,573,572,573,
            647,505,648,500,572,573,644,641,645,642,
            505,505,505,505,505,505,505,505,505,569,
            505,569,505,570,571,570,571,569,640,649,
            505,570,571,497,798,646,643,798
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 53,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 816,
           MAX_LA            = 2147483647,
           NUM_RULES         = 311,
           NUM_NONTERMINALS  = 51,
           NUM_SYMBOLS       = 131,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 312,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 504,
           ERROR_ACTION      = 505;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
