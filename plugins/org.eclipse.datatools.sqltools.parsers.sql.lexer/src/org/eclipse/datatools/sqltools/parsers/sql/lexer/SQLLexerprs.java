/*******************************************************************************
 * Copyright (c) 2004, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0
 * which is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.datatools.sqltools.parsers.sql.lexer;

import com.ibm.lpg.ParseTable;

class SQLLexerprs implements ParseTable, SQLLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,3,2,1,2,3,2,1,
            2,1,1,1,1,2,3,1,2,2,
            2,1,2,2,3,2,3,3,5,3,
            3,2,0,1,2,3,2,0,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,2,2,2,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,2,1,
            1,1,1,1,1,1,2,1,1,3,
            3,1,2,1
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            19,19,20,20,20,20,20,20,20,20,
            20,20,20,20,27,21,34,34,29,36,
            36,6,6,6,22,22,37,37,35,35,
            38,38,23,23,39,5,5,40,41,41,
            24,24,24,42,42,42,10,10,10,25,
            43,43,43,43,44,44,26,46,46,4,
            4,4,4,4,2,2,2,2,2,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,1,1,1,1,1,
            1,1,1,1,1,12,12,12,12,12,
            12,9,9,33,33,33,33,33,33,33,
            33,33,33,33,33,33,33,33,33,33,
            33,48,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            13,13,13,13,13,13,13,13,13,13,
            13,13,13,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,14,14,14,14,14,14,14,
            14,14,14,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,15,15,15,15,15,15,
            15,15,15,15,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,16,16,16,16,
            16,16,16,16,16,16,45,45,45,45,
            11,11,11,11,17,17,47,47,47,47,
            47,47,47,47,47,8,8,8,8,8,
            7,7,7,7,7,7,7,18,28,28,
            28,28,30,31,32,631,35,21,64,19,
            332,302,710,23,22,64,792,985,21,64,
            912,20,383,986,310,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            17,307,867,36,32,33,913,336,79,281,
            280,64,41,126,988,26,40,901,36,1,
            276,275,64,278,282,284,285,30,991,144,
            237,281,280,64,277,145,987,27,317,261,
            260,64,263,941,36,360,282,284,285,52,
            952,36,262,751,23,22,64,388,159,276,
            275,64,278,963,36,926,31,553,257,256,
            64,259,368,277,475,261,260,64,263,994,
            258,419,404,974,36,50,833,111,262,395,
            267,266,64,995,1002,38,850,111,112,698,
            35,1004,270,989,347,39,879,35,112,890,
            35,373,51,1006,380,930,35,930,35,1007,
            393,469,413,469,469,469,469,426,469,469,
            469,469,469,469,469,469,57,469,469
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,0,0,67,68,69,70,71,
            72,73,74,75,76,77,78,79,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,0,0,67,68,69,70,71,72,73,
            74,75,76,77,78,79,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,0,0,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,0,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,0,1,2,
            3,4,5,6,7,8,9,10,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,0,0,0,0,0,0,0,0,0,
            0,0,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,0,1,2,3,
            4,5,6,7,8,9,10,11,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,0,0,48,0,0,0,0,0,
            0,43,0,11,0,0,0,0,50,0,
            1,2,3,4,5,6,7,8,9,10,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,0,0,0,0,64,
            0,80,0,0,0,0,0,0,0,0,
            0,0,17,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,45,
            44,0,0,46,44,49,43,53,54,51,
            52,47,41,0,0,42,41,0,42,65,
            66,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            469,564,565,566,567,568,569,570,571,572,
            573,542,538,539,540,541,543,561,544,545,
            546,547,548,549,550,551,552,553,554,555,
            556,557,558,559,560,562,563,534,537,536,
            535,424,678,663,690,528,680,685,687,689,
            662,665,666,529,530,691,692,676,677,683,
            684,686,688,664,667,531,532,668,673,669,
            670,671,672,674,675,679,681,682,469,564,
            565,566,567,568,569,570,571,572,573,542,
            538,539,540,541,543,561,544,545,546,547,
            548,549,550,551,552,553,554,555,556,557,
            558,559,560,562,563,534,537,536,535,722,
            431,694,720,752,710,715,717,719,693,696,
            697,733,734,721,723,707,708,713,714,716,
            718,695,698,53,58,699,704,700,701,702,
            703,705,706,709,711,712,724,755,469,564,
            565,566,567,568,569,570,571,572,573,542,
            538,539,540,541,543,561,544,545,546,547,
            548,549,550,551,552,553,554,555,556,557,
            558,559,560,562,563,534,537,536,535,443,
            678,663,690,528,680,685,687,689,662,665,
            666,529,530,691,692,676,677,683,684,686,
            688,664,667,531,532,668,673,669,670,671,
            672,674,675,679,681,682,469,564,565,566,
            567,568,569,570,571,572,573,542,538,539,
            540,541,543,561,544,545,546,547,548,549,
            550,551,552,553,554,555,556,557,558,559,
            560,562,563,534,537,536,535,722,449,694,
            720,752,710,715,717,719,693,696,697,733,
            734,721,723,707,708,713,714,716,718,695,
            698,469,469,699,704,700,701,702,703,705,
            706,709,711,712,724,755,469,564,565,566,
            567,568,569,570,571,572,573,542,538,539,
            540,541,543,561,544,545,546,547,548,549,
            550,551,552,553,554,555,556,557,558,559,
            560,562,563,534,537,536,535,660,646,633,
            658,528,648,653,655,657,632,634,635,529,
            530,659,661,644,645,651,652,654,656,397,
            523,531,532,636,641,637,638,639,640,642,
            643,647,649,650,56,564,565,566,567,568,
            569,570,571,572,573,542,538,539,540,541,
            543,561,544,545,546,547,548,549,550,551,
            552,553,554,555,556,557,558,559,560,562,
            563,534,537,536,535,630,616,602,628,737,
            618,623,625,627,601,604,605,469,469,629,
            631,614,615,621,622,624,626,603,738,740,
            741,606,611,607,608,609,610,612,613,617,
            619,620,743,742,469,564,565,566,567,568,
            569,570,571,572,573,542,538,539,540,541,
            543,561,544,545,546,547,548,549,550,551,
            552,553,554,555,556,557,558,559,560,562,
            563,534,537,536,535,660,646,633,658,528,
            648,653,655,657,632,634,635,529,530,659,
            661,644,645,651,652,654,656,518,524,531,
            532,636,641,637,638,639,640,642,643,647,
            649,650,469,564,565,566,567,568,569,570,
            571,572,573,542,538,539,540,541,543,561,
            544,545,546,547,548,549,550,551,552,553,
            554,555,556,557,558,559,560,562,563,534,
            537,536,535,630,616,602,628,528,618,623,
            625,627,601,604,605,529,530,629,631,614,
            615,621,622,624,626,603,469,531,532,606,
            611,607,608,609,610,612,613,617,619,620,
            469,313,565,566,567,568,569,570,571,572,
            573,542,538,539,540,541,543,561,544,545,
            546,547,548,549,550,551,552,553,554,555,
            556,557,558,559,560,562,563,534,537,536,
            535,349,338,409,588,528,344,423,429,358,
            582,586,587,529,530,763,306,590,591,757,
            758,589,366,395,584,531,532,131,564,565,
            566,567,568,569,570,571,572,573,761,16,
            564,565,566,567,568,569,570,571,572,573,
            542,538,539,540,541,543,561,544,545,546,
            547,548,549,550,551,552,553,554,555,556,
            557,558,559,560,562,563,534,537,536,535,
            293,564,565,566,567,568,569,570,571,572,
            573,542,538,539,540,541,543,561,544,545,
            546,547,548,549,550,551,552,553,554,555,
            556,557,558,559,560,562,563,534,537,536,
            535,469,469,469,469,469,469,469,469,469,
            469,469,542,538,539,540,541,543,561,544,
            545,546,547,548,549,550,551,552,553,554,
            555,556,557,558,559,560,562,563,534,537,
            536,535,469,564,565,566,567,568,569,570,
            571,572,573,578,574,575,576,577,579,37,
            564,565,566,567,568,569,570,571,572,573,
            578,574,575,576,577,579,34,564,565,566,
            567,568,569,570,571,572,573,436,469,564,
            565,566,567,568,569,570,571,572,573,44,
            564,565,566,567,568,569,570,571,572,573,
            43,564,565,566,567,568,569,570,571,572,
            573,469,42,469,439,469,469,469,469,469,
            469,447,469,436,469,116,469,469,445,469,
            564,565,566,567,568,569,570,571,572,573,
            46,564,565,566,567,568,569,570,571,572,
            573,45,564,565,566,567,568,569,570,571,
            572,573,48,564,565,566,567,568,569,570,
            571,572,573,47,564,565,566,567,568,569,
            570,571,572,573,18,95,124,469,469,359,
            125,468,469,114,123,469,469,469,469,469,
            469,29,416,25,469,28,24,469,469,469,
            469,469,469,469,469,469,469,469,469,469,
            469,469,469,469,469,469,469,469,469,528,
            596,469,469,599,597,598,365,529,530,759,
            760,433,748,469,469,756,748,469,756,531,
            532
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 42,
           NT_OFFSET         = 80,
           LA_STATE_OFFSET   = 763,
           MAX_LA            = 1,
           NUM_RULES         = 294,
           NUM_NONTERMINALS  = 49,
           NUM_SYMBOLS       = 129,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 295,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 80,
           EOLT_SYMBOL       = 81,
           ACCEPT_ACTION     = 468,
           ERROR_ACTION      = 469;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
